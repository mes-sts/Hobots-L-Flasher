//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hobots_L_Flasher.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Hobots_L_Flasher.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\.
        /// </summary>
        internal static string APPLICATON_FIRMWARES_PATH {
            get {
                return ResourceManager.GetString("APPLICATON_FIRMWARES_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на utils\avrdude\avrdude.conf.
        /// </summary>
        internal static string AVRDUDE_CONF_PATH {
            get {
                return ResourceManager.GetString("AVRDUDE_CONF_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на utils\avrdude\avrdude.exe.
        /// </summary>
        internal static string AVRDUDE_EXE_PATH {
            get {
                return ResourceManager.GetString("AVRDUDE_EXE_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bootloaders\atmega2560\stk500boot_v2_mega2560.hex.
        /// </summary>
        internal static string BOOTLOADER_ATMEGA2560_PATH {
            get {
                return ResourceManager.GetString("BOOTLOADER_ATMEGA2560_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bootloaders\atmega328\optiboot_atmega328.hex.
        /// </summary>
        internal static string BOOTLOADER_ATMEGA328_PATH {
            get {
                return ResourceManager.GetString("BOOTLOADER_ATMEGA328_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bootloaders\esp32\beginer\esp32_beginer_bootloader.bin.
        /// </summary>
        internal static string BOOTLOADER_BEGINER_ESP32_PATH {
            get {
                return ResourceManager.GetString("BOOTLOADER_BEGINER_ESP32_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bootloaders\esp32\esp32_boot_app0.bin.
        /// </summary>
        internal static string BOOTLOADER_BOOT_APP0_ESP32_PATH {
            get {
                return ResourceManager.GetString("BOOTLOADER_BOOT_APP0_ESP32_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bootloaders\esp32\esp32_partitions.bin.
        /// </summary>
        internal static string BOOTLOADER_PARTITIONS_ESP32_PATH {
            get {
                return ResourceManager.GetString("BOOTLOADER_PARTITIONS_ESP32_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на bootloaders\stm32f103\hid_bootloader_hobots_l_main_board_ultra.bin.
        /// </summary>
        internal static string BOOTLOADER_STM32F103_PATH {
            get {
                return ResourceManager.GetString("BOOTLOADER_STM32F103_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\ch340\CH340SER.EXE.
        /// </summary>
        internal static string DRIVER_CH340_PATH {
            get {
                return ResourceManager.GetString("DRIVER_CH340_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\cp2102\CP210xVCPInstaller_x64.exe.
        /// </summary>
        internal static string DRIVER_CP2102_x64_PATH {
            get {
                return ResourceManager.GetString("DRIVER_CP2102_x64_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\cp2102\CP210xVCPInstaller_x86.exe.
        /// </summary>
        internal static string DRIVER_CP2102_x86_PATH {
            get {
                return ResourceManager.GetString("DRIVER_CP2102_x86_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\ft232\CDM21228_Setup.exe.
        /// </summary>
        internal static string DRIVER_FT232_PATH {
            get {
                return ResourceManager.GetString("DRIVER_FT232_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\stlink\dpinst_amd64.exe.
        /// </summary>
        internal static string DRIVER_STLINK_x64_PATH {
            get {
                return ResourceManager.GetString("DRIVER_STLINK_x64_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\stlink\dpinst_x86.exe.
        /// </summary>
        internal static string DRIVER_STLINK_x86_PATH {
            get {
                return ResourceManager.GetString("DRIVER_STLINK_x86_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на drivers\usbasp\InstallDriver.exe.
        /// </summary>
        internal static string DRIVER_USBASP_PATH {
            get {
                return ResourceManager.GetString("DRIVER_USBASP_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на utils\esptool\esptool.exe.
        /// </summary>
        internal static string ESPTOOL_EXE_PATH {
            get {
                return ResourceManager.GetString("ESPTOOL_EXE_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_beeper_check.hex.
        /// </summary>
        internal static string FIRMWARE_BEEPER_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_BEEPER_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_BEEPER_CLASSIC {
            get {
                return ResourceManager.GetString("FIRMWARE_BEEPER_CLASSIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\hyper\hl_hyper_beeper_check.hex.
        /// </summary>
        internal static string FIRMWARE_BEEPER_HYPER {
            get {
                return ResourceManager.GetString("FIRMWARE_BEEPER_HYPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_beeper_check.hex.
        /// </summary>
        internal static string FIRMWARE_BEEPER_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_BEEPER_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_beeper_check.hex.
        /// </summary>
        internal static string FIRMWARE_BEEPER_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_BEEPER_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_beeper_check.bin.
        /// </summary>
        internal static string FIRMWARE_BEEPER_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_BEEPER_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_bluetooth_check.hex.
        /// </summary>
        internal static string FIRMWARE_BLUETOOTH_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_BLUETOOTH_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_bord_display_buttons_check.hex.
        /// </summary>
        internal static string FIRMWARE_BOARD_DISPLAY_BUTTONS_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_BOARD_DISPLAY_BUTTONS_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_button_check.hex.
        /// </summary>
        internal static string FIRMWARE_BUTTON_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_BUTTON_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_button_check.hex.
        /// </summary>
        internal static string FIRMWARE_BUTTON_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_BUTTON_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_buttons_check.hex.
        /// </summary>
        internal static string FIRMWARE_BUTTONS_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_BUTTONS_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\hyper\hl_hyper_buttons_check.hex.
        /// </summary>
        internal static string FIRMWARE_BUTTONS_HYPER {
            get {
                return ResourceManager.GetString("FIRMWARE_BUTTONS_HYPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_buttons_check.bin.
        /// </summary>
        internal static string FIRMWARE_BUTTONS_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_BUTTONS_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_color_check.hex.
        /// </summary>
        internal static string FIRMWARE_COLOR_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_COLOR_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_DEMO_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_DEMO_CLASSIC {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_CLASSIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_DEMO_DREAM {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_DREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_DEMO_HYPER {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_HYPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_demo_check.hex.
        /// </summary>
        internal static string FIRMWARE_DEMO_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_demo_check.hex.
        /// </summary>
        internal static string FIRMWARE_DEMO_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_DEMO_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_DEMO_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_external_light_check.hex.
        /// </summary>
        internal static string FIRMWARE_EXTERNAL_LIGHT_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_EXTERNAL_LIGHT_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_gyro_check.hex.
        /// </summary>
        internal static string FIRMWARE_GYRO_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_GYRO_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_gyro_check.hex.
        /// </summary>
        internal static string FIRMWARE_GYRO_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_GYRO_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_gyro_check.bin.
        /// </summary>
        internal static string FIRMWARE_GYRO_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_GYRO_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_massive_sensor_check.bin.
        /// </summary>
        internal static string FIRMWARE_IR_MASSIVE_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_IR_MASSIVE_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_ir_receiver_check.hex.
        /// </summary>
        internal static string FIRMWARE_IR_RECEIVER_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_IR_RECEIVER_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_ir_receiver_check.hex.
        /// </summary>
        internal static string FIRMWARE_IR_RECEIVER_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_IR_RECEIVER_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_ir_transmitter_check.hex.
        /// </summary>
        internal static string FIRMWARE_IR_TRANSMITTER_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_IR_TRANSMITTER_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_joystick_ps2_check.hex.
        /// </summary>
        internal static string FIRMWARE_JOYSTICK_PS2_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_JOYSTICK_PS2_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_leds_check.hex.
        /// </summary>
        internal static string FIRMWARE_LEDS_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_LEDS_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\hyper\hl_hyper_leds_check.hex.
        /// </summary>
        internal static string FIRMWARE_LEDS_HYPER {
            get {
                return ResourceManager.GetString("FIRMWARE_LEDS_HYPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_leds_check.bin.
        /// </summary>
        internal static string FIRMWARE_LEDS_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_LEDS_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_light_check.ino.hex.
        /// </summary>
        internal static string FIRMWARE_LIGHT_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_LIGHT_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_lim_button_check.hex.
        /// </summary>
        internal static string FIRMWARE_LIM_BUTTON_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_LIM_BUTTON_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_line_check.hex.
        /// </summary>
        internal static string FIRMWARE_LINE_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_LINE_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_double_line_check.hex.
        /// </summary>
        internal static string FIRMWARE_LINE_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_LINE_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_micro_sd_card_check.hex.
        /// </summary>
        internal static string FIRMWARE_MICRO_SD_CARD_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_MICRO_SD_CARD_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_microphone_check.hex.
        /// </summary>
        internal static string FIRMWARE_MICROPHONE_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_MICROPHONE_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_motors_check.hex.
        /// </summary>
        internal static string FIRMWARE_MOTORS_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_MOTORS_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_MOTORS_CLASSIC {
            get {
                return ResourceManager.GetString("FIRMWARE_MOTORS_CLASSIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\hyper\hl_hyper_motors_check.hex.
        /// </summary>
        internal static string FIRMWARE_MOTORS_HYPER {
            get {
                return ResourceManager.GetString("FIRMWARE_MOTORS_HYPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_motors_check.hex.
        /// </summary>
        internal static string FIRMWARE_MOTORS_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_MOTORS_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_motors_check.hex.
        /// </summary>
        internal static string FIRMWARE_MOTORS_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_MOTORS_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_motors_check.bin.
        /// </summary>
        internal static string FIRMWARE_MOTORS_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_MOTORS_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_rgb_led_check.hex.
        /// </summary>
        internal static string FIRMWARE_RGB_LED_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_RGB_LED_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_rgb_check.hex.
        /// </summary>
        internal static string FIRMWARE_RGB_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_RGB_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_serial_bus_servo_check.hex.
        /// </summary>
        internal static string FIRMWARE_SERIAL_BUS_SERVO_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_SERIAL_BUS_SERVO_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\ultra\hl_ultra_serial_bus_servo_check.bin.
        /// </summary>
        internal static string FIRMWARE_SERIAL_BUS_SERVO_ULTRA {
            get {
                return ResourceManager.GetString("FIRMWARE_SERIAL_BUS_SERVO_ULTRA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_servo_check.hex.
        /// </summary>
        internal static string FIRMWARE_SERVO_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_SERVO_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на .
        /// </summary>
        internal static string FIRMWARE_SERVO_CLASSIC {
            get {
                return ResourceManager.GetString("FIRMWARE_SERVO_CLASSIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\hyper\hl_hyper_servo_check.hex.
        /// </summary>
        internal static string FIRMWARE_SERVO_HYPER {
            get {
                return ResourceManager.GetString("FIRMWARE_SERVO_HYPER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_servo_check.ino.hex.
        /// </summary>
        internal static string FIRMWARE_SERVO_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_SERVO_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_servo_check.hex.
        /// </summary>
        internal static string FIRMWARE_SERVO_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_SERVO_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_sonar_check.hex.
        /// </summary>
        internal static string FIRMWARE_SONAR_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_SONAR_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\mini\hl_mini_sonar_check.hex.
        /// </summary>
        internal static string FIRMWARE_SONAR_MINI {
            get {
                return ResourceManager.GetString("FIRMWARE_SONAR_MINI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\standart\hl_standart_sonar_check.hex.
        /// </summary>
        internal static string FIRMWARE_SONAR_STANDART {
            get {
                return ResourceManager.GetString("FIRMWARE_SONAR_STANDART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-atmega2560\hl_beginer_atmega2560_wifi_module_check.hex.
        /// </summary>
        internal static string FIRMWARE_WIFI_MODULE_BEGINER_ATMEGA2560 {
            get {
                return ResourceManager.GetString("FIRMWARE_WIFI_MODULE_BEGINER_ATMEGA2560", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-esp32\hl_beginer_esp32_wifi_module_check.bin.
        /// </summary>
        internal static string FIRMWARE_WIFI_MODULE_BEGINER_ESP32 {
            get {
                return ResourceManager.GetString("FIRMWARE_WIFI_MODULE_BEGINER_ESP32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-esp32\hl_beginer_esp32_wifi_upload_ota_p1_check.bin.
        /// </summary>
        internal static string FIRMWARE_WIFI_UPLOAD_OTA_P1_BEGINER_ESP32 {
            get {
                return ResourceManager.GetString("FIRMWARE_WIFI_UPLOAD_OTA_P1_BEGINER_ESP32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на firmwares\beginer-esp32\hl_beginer_esp32_wifi_upload_ota_p2_check.bin.
        /// </summary>
        internal static string FIRMWARE_WIFI_UPLOAD_OTA_P2_BEGINER_ESP32 {
            get {
                return ResourceManager.GetString("FIRMWARE_WIFI_UPLOAD_OTA_P2_BEGINER_ESP32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на utils\hid-flash\hid-flash.exe.
        /// </summary>
        internal static string HID_FLASH_EXE_PATH {
            get {
                return ResourceManager.GetString("HID_FLASH_EXE_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Icon, аналогичного (Значок).
        /// </summary>
        internal static System.Drawing.Icon HL_Flash_Logo {
            get {
                object obj = ResourceManager.GetObject("HL_Flash_Logo", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на https://github.com/mes-sts/Hobots-L-Flasher.
        /// </summary>
        internal static string HOBOTS_L_APPLICATON_SOURCES_LINK {
            get {
                return ResourceManager.GetString("HOBOTS_L_APPLICATON_SOURCES_LINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на https://github.com/mes-sts/Hobots-L-Examples.
        /// </summary>
        internal static string HOBOTS_L_ARDUINO_EXAMPLES_LINK {
            get {
                return ResourceManager.GetString("HOBOTS_L_ARDUINO_EXAMPLES_LINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на help\hobots-l-flasher-help.pdf.
        /// </summary>
        internal static string HOBOTS_L_FLASHER_HELP_PATH {
            get {
                return ResourceManager.GetString("HOBOTS_L_FLASHER_HELP_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на utils\stlink\ST-LINK_CLI.exe.
        /// </summary>
        internal static string STLINK_EXE_PATH {
            get {
                return ResourceManager.GetString("STLINK_EXE_PATH", resourceCulture);
            }
        }
    }
}
